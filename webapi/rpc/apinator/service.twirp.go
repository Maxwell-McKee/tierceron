// Code generated by protoc-gen-twirp v5.7.0, DO NOT EDIT.
// source: rpc/apinator/service.proto

/*
Package apinator is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.7.0.

It is generated from these files:
	rpc/apinator/service.proto
*/
package apinator

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Imports only used by utility functions:
import io "io"
import json "encoding/json"
import url "net/url"

// =================================
// EnterpriseServiceBroker Interface
// =================================

type EnterpriseServiceBroker interface {
	GetTemplate(context.Context, *TemplateReq) (*TemplateResp, error)

	Validate(context.Context, *ValidationReq) (*ValidationResp, error)

	ListServiceTemplates(context.Context, *ListReq) (*ListResp, error)

	GetValues(context.Context, *GetValuesReq) (*ValuesRes, error)

	InitVault(context.Context, *InitReq) (*InitResp, error)

	GetStatus(context.Context, *NoParams) (*VaultStatus, error)

	APILogin(context.Context, *LoginReq) (*LoginResp, error)

	Unseal(context.Context, *UnsealReq) (*UnsealResp, error)

	GraphQL(context.Context, *GraphQLQuery) (*GraphQLResp, error)

	UpdateAPI(context.Context, *UpdateAPIReq) (*NoParams, error)

	GetVaultTokens(context.Context, *TokensReq) (*TokensResp, error)

	RollTokens(context.Context, *NoParams) (*NoParams, error)

	ResetServer(context.Context, *ResetReq) (*NoParams, error)

	CheckConnection(context.Context, *NoParams) (*CheckConnResp, error)
}

// =======================================
// EnterpriseServiceBroker Protobuf Client
// =======================================

type enterpriseServiceBrokerProtobufClient struct {
	client HTTPClient
	urls   [14]string
}

// NewEnterpriseServiceBrokerProtobufClient creates a Protobuf client that implements the EnterpriseServiceBroker interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewEnterpriseServiceBrokerProtobufClient(addr string, client HTTPClient) EnterpriseServiceBroker {
	prefix := urlBase(addr) + EnterpriseServiceBrokerPathPrefix
	urls := [14]string{
		prefix + "GetTemplate",
		prefix + "Validate",
		prefix + "ListServiceTemplates",
		prefix + "GetValues",
		prefix + "InitVault",
		prefix + "GetStatus",
		prefix + "APILogin",
		prefix + "Unseal",
		prefix + "GraphQL",
		prefix + "UpdateAPI",
		prefix + "GetVaultTokens",
		prefix + "RollTokens",
		prefix + "ResetServer",
		prefix + "CheckConnection",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &enterpriseServiceBrokerProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &enterpriseServiceBrokerProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *enterpriseServiceBrokerProtobufClient) GetTemplate(ctx context.Context, in *TemplateReq) (*TemplateResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	out := new(TemplateResp)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) Validate(ctx context.Context, in *ValidationReq) (*ValidationResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	out := new(ValidationResp)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) ListServiceTemplates(ctx context.Context, in *ListReq) (*ListResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "ListServiceTemplates")
	out := new(ListResp)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) GetValues(ctx context.Context, in *GetValuesReq) (*ValuesRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	out := new(ValuesRes)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) InitVault(ctx context.Context, in *InitReq) (*InitResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "InitVault")
	out := new(InitResp)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) GetStatus(ctx context.Context, in *NoParams) (*VaultStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	out := new(VaultStatus)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) APILogin(ctx context.Context, in *LoginReq) (*LoginResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "APILogin")
	out := new(LoginResp)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) Unseal(ctx context.Context, in *UnsealReq) (*UnsealResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "Unseal")
	out := new(UnsealResp)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) GraphQL(ctx context.Context, in *GraphQLQuery) (*GraphQLResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GraphQL")
	out := new(GraphQLResp)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) UpdateAPI(ctx context.Context, in *UpdateAPIReq) (*NoParams, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAPI")
	out := new(NoParams)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) GetVaultTokens(ctx context.Context, in *TokensReq) (*TokensResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetVaultTokens")
	out := new(TokensResp)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) RollTokens(ctx context.Context, in *NoParams) (*NoParams, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "RollTokens")
	out := new(NoParams)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) ResetServer(ctx context.Context, in *ResetReq) (*NoParams, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "ResetServer")
	out := new(NoParams)
	err := doProtobufRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerProtobufClient) CheckConnection(ctx context.Context, in *NoParams) (*CheckConnResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "CheckConnection")
	out := new(CheckConnResp)
	err := doProtobufRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================================
// EnterpriseServiceBroker JSON Client
// ===================================

type enterpriseServiceBrokerJSONClient struct {
	client HTTPClient
	urls   [14]string
}

// NewEnterpriseServiceBrokerJSONClient creates a JSON client that implements the EnterpriseServiceBroker interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewEnterpriseServiceBrokerJSONClient(addr string, client HTTPClient) EnterpriseServiceBroker {
	prefix := urlBase(addr) + EnterpriseServiceBrokerPathPrefix
	urls := [14]string{
		prefix + "GetTemplate",
		prefix + "Validate",
		prefix + "ListServiceTemplates",
		prefix + "GetValues",
		prefix + "InitVault",
		prefix + "GetStatus",
		prefix + "APILogin",
		prefix + "Unseal",
		prefix + "GraphQL",
		prefix + "UpdateAPI",
		prefix + "GetVaultTokens",
		prefix + "RollTokens",
		prefix + "ResetServer",
		prefix + "CheckConnection",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &enterpriseServiceBrokerJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &enterpriseServiceBrokerJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *enterpriseServiceBrokerJSONClient) GetTemplate(ctx context.Context, in *TemplateReq) (*TemplateResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	out := new(TemplateResp)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) Validate(ctx context.Context, in *ValidationReq) (*ValidationResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	out := new(ValidationResp)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) ListServiceTemplates(ctx context.Context, in *ListReq) (*ListResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "ListServiceTemplates")
	out := new(ListResp)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) GetValues(ctx context.Context, in *GetValuesReq) (*ValuesRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	out := new(ValuesRes)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) InitVault(ctx context.Context, in *InitReq) (*InitResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "InitVault")
	out := new(InitResp)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) GetStatus(ctx context.Context, in *NoParams) (*VaultStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	out := new(VaultStatus)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) APILogin(ctx context.Context, in *LoginReq) (*LoginResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "APILogin")
	out := new(LoginResp)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) Unseal(ctx context.Context, in *UnsealReq) (*UnsealResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "Unseal")
	out := new(UnsealResp)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) GraphQL(ctx context.Context, in *GraphQLQuery) (*GraphQLResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GraphQL")
	out := new(GraphQLResp)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) UpdateAPI(ctx context.Context, in *UpdateAPIReq) (*NoParams, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAPI")
	out := new(NoParams)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) GetVaultTokens(ctx context.Context, in *TokensReq) (*TokensResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "GetVaultTokens")
	out := new(TokensResp)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) RollTokens(ctx context.Context, in *NoParams) (*NoParams, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "RollTokens")
	out := new(NoParams)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) ResetServer(ctx context.Context, in *ResetReq) (*NoParams, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "ResetServer")
	out := new(NoParams)
	err := doJSONRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceBrokerJSONClient) CheckConnection(ctx context.Context, in *NoParams) (*CheckConnResp, error) {
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithMethodName(ctx, "CheckConnection")
	out := new(CheckConnResp)
	err := doJSONRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================================
// EnterpriseServiceBroker Server Handler
// ======================================

type enterpriseServiceBrokerServer struct {
	EnterpriseServiceBroker
	hooks *twirp.ServerHooks
}

func NewEnterpriseServiceBrokerServer(svc EnterpriseServiceBroker, hooks *twirp.ServerHooks) TwirpServer {
	return &enterpriseServiceBrokerServer{
		EnterpriseServiceBroker: svc,
		hooks: hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *enterpriseServiceBrokerServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// EnterpriseServiceBrokerPathPrefix is used for all URL paths on a twirp EnterpriseServiceBroker server.
// Requests are always: POST EnterpriseServiceBrokerPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const EnterpriseServiceBrokerPathPrefix = "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/"

func (s *enterpriseServiceBrokerServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "viewpoint.whoville.apinator")
	ctx = ctxsetters.WithServiceName(ctx, "EnterpriseServiceBroker")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/GetTemplate":
		s.serveGetTemplate(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/Validate":
		s.serveValidate(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/ListServiceTemplates":
		s.serveListServiceTemplates(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/GetValues":
		s.serveGetValues(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/InitVault":
		s.serveInitVault(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/GetStatus":
		s.serveGetStatus(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/APILogin":
		s.serveAPILogin(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/Unseal":
		s.serveUnseal(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/GraphQL":
		s.serveGraphQL(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/UpdateAPI":
		s.serveUpdateAPI(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/GetVaultTokens":
		s.serveGetVaultTokens(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/RollTokens":
		s.serveRollTokens(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/ResetServer":
		s.serveResetServer(ctx, resp, req)
		return
	case "/twirp/viewpoint.whoville.apinator.EnterpriseServiceBroker/CheckConnection":
		s.serveCheckConnection(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *enterpriseServiceBrokerServer) serveGetTemplate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTemplateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTemplateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveGetTemplateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TemplateReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *TemplateResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetTemplate(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TemplateResp and nil error while calling GetTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetTemplateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(TemplateReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *TemplateResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetTemplate(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TemplateResp and nil error while calling GetTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveValidate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveValidateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveValidateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveValidateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ValidationReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ValidationResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.Validate(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValidationResp and nil error while calling Validate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveValidateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ValidationReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ValidationResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.Validate(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValidationResp and nil error while calling Validate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveListServiceTemplates(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListServiceTemplatesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListServiceTemplatesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveListServiceTemplatesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListServiceTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ListReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ListResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.ListServiceTemplates(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListResp and nil error while calling ListServiceTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveListServiceTemplatesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListServiceTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ListReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ListResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.ListServiceTemplates(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListResp and nil error while calling ListServiceTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetValues(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetValuesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetValuesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveGetValuesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetValuesReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ValuesRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetValues(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValuesRes and nil error while calling GetValues. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetValuesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetValuesReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ValuesRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetValues(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValuesRes and nil error while calling GetValues. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveInitVault(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInitVaultJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInitVaultProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveInitVaultJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InitVault")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InitReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *InitResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.InitVault(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InitResp and nil error while calling InitVault. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveInitVaultProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InitVault")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(InitReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *InitResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.InitVault(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InitResp and nil error while calling InitVault. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveGetStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(NoParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *VaultStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VaultStatus and nil error while calling GetStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(NoParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *VaultStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VaultStatus and nil error while calling GetStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveAPILogin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAPILoginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAPILoginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveAPILoginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "APILogin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(LoginReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *LoginResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.APILogin(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResp and nil error while calling APILogin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveAPILoginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "APILogin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(LoginReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *LoginResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.APILogin(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResp and nil error while calling APILogin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveUnseal(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUnsealJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUnsealProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveUnsealJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Unseal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UnsealReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *UnsealResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.Unseal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UnsealResp and nil error while calling Unseal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveUnsealProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Unseal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UnsealReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *UnsealResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.Unseal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UnsealResp and nil error while calling Unseal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGraphQL(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGraphQLJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGraphQLProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveGraphQLJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GraphQL")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GraphQLQuery)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GraphQLResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GraphQL(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GraphQLResp and nil error while calling GraphQL. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGraphQLProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GraphQL")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GraphQLQuery)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GraphQLResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GraphQL(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GraphQLResp and nil error while calling GraphQL. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveUpdateAPI(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAPIJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAPIProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveUpdateAPIJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAPI")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateAPIReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *NoParams
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.UpdateAPI(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NoParams and nil error while calling UpdateAPI. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveUpdateAPIProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAPI")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateAPIReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *NoParams
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.UpdateAPI(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NoParams and nil error while calling UpdateAPI. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetVaultTokens(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetVaultTokensJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetVaultTokensProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveGetVaultTokensJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVaultTokens")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TokensReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *TokensResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetVaultTokens(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokensResp and nil error while calling GetVaultTokens. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveGetVaultTokensProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVaultTokens")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(TokensReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *TokensResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.GetVaultTokens(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokensResp and nil error while calling GetVaultTokens. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveRollTokens(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRollTokensJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRollTokensProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveRollTokensJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RollTokens")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(NoParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *NoParams
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.RollTokens(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NoParams and nil error while calling RollTokens. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveRollTokensProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RollTokens")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(NoParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *NoParams
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.RollTokens(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NoParams and nil error while calling RollTokens. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveResetServer(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResetServerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResetServerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveResetServerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetServer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ResetReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *NoParams
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.ResetServer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NoParams and nil error while calling ResetServer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveResetServerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetServer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ResetReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *NoParams
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.ResetServer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NoParams and nil error while calling ResetServer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveCheckConnection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCheckConnectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCheckConnectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *enterpriseServiceBrokerServer) serveCheckConnectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckConnection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(NoParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *CheckConnResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.CheckConnection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CheckConnResp and nil error while calling CheckConnection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) serveCheckConnectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckConnection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(NoParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *CheckConnResp
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.EnterpriseServiceBroker.CheckConnection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CheckConnResp and nil error while calling CheckConnection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *enterpriseServiceBrokerServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *enterpriseServiceBrokerServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *enterpriseServiceBrokerServer) PathPrefix() string {
	return EnterpriseServiceBrokerPathPrefix
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler
	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// github.com/golang/protobuf/protoc-gen-go/descriptor.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)
	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string
	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route twirp requests
	// alongside non-twirp requests on one HTTP listener.
	PathPrefix() string
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Non-twirp errors are wrapped as Internal (default)
	twerr, ok := err.(twirp.Error)
	if !ok {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v5.7.0")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}
	var tj twerrJSON
	if err := json.Unmarshal(respBodyBytes, &tj); err != nil {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg)
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429, 502, 503, 504: // Too Many Requests, Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Cause() error  { return e.cause }
func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause, accessible
// by github.com/pkg/errors.Cause, but the original error message is not exposed on Msg().
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Cause() error                                { return e.cause }
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return wrapInternal(err, "failed to unmarshal proto response")
	}
	return nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBody := bytes.NewBuffer(nil)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(reqBody, in); err != nil {
		return wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/json")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(resp.Body, out); err != nil {
		return wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}
	return nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 1405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0x97, 0x77, 0xb3, 0x1b, 0xfb, 0x6d, 0xda, 0x7e, 0x35, 0xaa, 0xbe, 0xac, 0x4c, 0x0f, 0x91,
	0xd5, 0xc2, 0xb6, 0x55, 0x5d, 0x9a, 0x56, 0x3d, 0xb4, 0x2a, 0xa8, 0x4d, 0x42, 0x14, 0xb1, 0x54,
	0x89, 0xd3, 0x84, 0xfe, 0xa0, 0x48, 0x8e, 0x77, 0x48, 0x4c, 0x1c, 0x8f, 0x33, 0x33, 0xde, 0x02,
	0x37, 0x2e, 0x88, 0x1b, 0x7f, 0x03, 0x27, 0x24, 0x6e, 0x48, 0x08, 0x89, 0x2b, 0x47, 0xfe, 0x00,
	0xfe, 0x13, 0xee, 0x68, 0xc6, 0x6f, 0x6c, 0x6f, 0x1b, 0x79, 0xdd, 0x96, 0xdb, 0xbc, 0xf1, 0xcc,
	0xe7, 0xfd, 0x9c, 0xcf, 0x7b, 0xbb, 0xe0, 0xf2, 0x2c, 0xba, 0x1e, 0x66, 0x71, 0x1a, 0x4a, 0xc6,
	0xaf, 0x0b, 0xca, 0xa7, 0x71, 0x44, 0xfd, 0x8c, 0x33, 0xc9, 0xc8, 0xbb, 0xd3, 0x98, 0xbe, 0xc8,
	0x58, 0x9c, 0x4a, 0xff, 0xc5, 0x21, 0x9b, 0xc6, 0x49, 0x42, 0x7d, 0x73, 0xd4, 0x03, 0xb0, 0x1f,
	0xb2, 0xad, 0x90, 0x87, 0xc7, 0xc2, 0xbb, 0x07, 0x8b, 0xe3, 0x58, 0xc8, 0x80, 0x9e, 0x90, 0x21,
	0x2c, 0x66, 0x9c, 0x7d, 0x45, 0x23, 0x39, 0xb4, 0x96, 0xad, 0x91, 0x13, 0x18, 0x51, 0x7d, 0x41,
	0xf8, 0x61, 0xa7, 0xf8, 0x82, 0xa2, 0x37, 0x02, 0xbb, 0xb8, 0x2e, 0x32, 0x72, 0x01, 0x1c, 0x49,
	0x8f, 0xb3, 0x24, 0x94, 0x54, 0x0c, 0xad, 0xe5, 0xee, 0xc8, 0x09, 0xaa, 0x0d, 0x6f, 0x17, 0x06,
	0x8f, 0x50, 0x78, 0x43, 0x65, 0x84, 0xc0, 0xc2, 0x97, 0x71, 0x42, 0x87, 0x5d, 0xbd, 0xad, 0xd7,
	0xde, 0x2d, 0x58, 0xaa, 0x60, 0x45, 0xa6, 0xce, 0x4c, 0x42, 0x19, 0x22, 0xa8, 0x5e, 0x93, 0xff,
	0x41, 0x97, 0x7e, 0x2d, 0x11, 0x4d, 0x2d, 0xbd, 0x5d, 0x38, 0xb3, 0x17, 0x26, 0xf1, 0x24, 0x94,
	0x31, 0x4b, 0xd1, 0x1c, 0xa3, 0xd4, 0x9a, 0x55, 0x5a, 0x33, 0xb4, 0x33, 0x6b, 0xa8, 0x82, 0x4d,
	0xa7, 0x68, 0x8d, 0x5a, 0x7a, 0x57, 0xe0, 0x6c, 0x1d, 0x56, 0x64, 0xea, 0x76, 0x2c, 0xf4, 0x9e,
	0xc6, 0xb5, 0x03, 0x23, 0x7a, 0xff, 0xf4, 0xc1, 0xd9, 0x0b, 0x93, 0x9c, 0x8a, 0x80, 0x0a, 0xf2,
	0x21, 0x2c, 0xd0, 0x74, 0x2a, 0x86, 0x9d, 0xe5, 0xee, 0x68, 0xb0, 0x72, 0xc5, 0x6f, 0x48, 0x9f,
	0x5f, 0xde, 0xf2, 0xd7, 0xd3, 0x69, 0xa0, 0xef, 0xb9, 0x3f, 0xf7, 0xa1, 0xbb, 0x9e, 0x4e, 0x95,
	0xfb, 0x69, 0x78, 0x6c, 0x9c, 0xd0, 0x6b, 0xf2, 0x10, 0x6c, 0x34, 0xd9, 0xe0, 0xaf, 0xb4, 0xc7,
	0xf7, 0xb7, 0x8a, 0xab, 0x41, 0x89, 0x41, 0xb6, 0xc1, 0xc9, 0x38, 0x9b, 0xc6, 0x13, 0xca, 0xc5,
	0xb0, 0xab, 0x01, 0x6f, 0xbe, 0x1e, 0xa0, 0xbe, 0x1b, 0x54, 0x28, 0xee, 0xaf, 0x5d, 0x58, 0x44,
	0x45, 0xa7, 0xba, 0xb0, 0x07, 0x36, 0xe6, 0xc3, 0xb8, 0x70, 0xe7, 0xf5, 0x5d, 0xf0, 0x77, 0x0a,
	0x88, 0xa0, 0xc4, 0x72, 0xff, 0xe8, 0xc0, 0xe2, 0x4e, 0x55, 0x5d, 0xaf, 0xe8, 0xdd, 0x85, 0x9e,
	0xaa, 0x32, 0xa3, 0xf4, 0xa3, 0x37, 0x57, 0xea, 0x7f, 0x1c, 0x27, 0x34, 0x28, 0xd0, 0xdc, 0x3f,
	0x2d, 0x58, 0x50, 0xf2, 0xa9, 0x3a, 0x9f, 0x43, 0x7f, 0xaa, 0x91, 0x50, 0xe9, 0xfa, 0x5b, 0x2a,
	0x2d, 0x8e, 0x04, 0x08, 0xea, 0x6e, 0x40, 0x4f, 0x6f, 0xa8, 0xf2, 0x3d, 0xa2, 0xdf, 0xa0, 0x6a,
	0xb5, 0x24, 0xe7, 0xa1, 0xa7, 0x0f, 0x61, 0xa1, 0x17, 0x02, 0xf9, 0x3f, 0xf4, 0x05, 0xcb, 0x79,
	0x64, 0xde, 0x1d, 0x4a, 0xee, 0x6f, 0x16, 0xd8, 0x26, 0x97, 0xa7, 0x3a, 0xf2, 0x99, 0x4a, 0x9a,
	0x10, 0x31, 0x4b, 0x8d, 0x2b, 0x77, 0xdf, 0xa0, 0x4c, 0xfc, 0x9d, 0x02, 0x23, 0x28, 0xc1, 0xdc,
	0xbb, 0x2a, 0x69, 0x7a, 0xad, 0xf4, 0xe6, 0x82, 0x72, 0xa3, 0x57, 0xad, 0x15, 0x0f, 0x25, 0xa1,
	0x90, 0x63, 0x76, 0xb0, 0x99, 0x6a, 0x57, 0xba, 0x41, 0xb5, 0xe1, 0x9d, 0x85, 0xa5, 0x0d, 0x2a,
	0x8d, 0xae, 0x13, 0xef, 0x2f, 0x0b, 0x16, 0x37, 0xd3, 0x58, 0x33, 0xe0, 0xaa, 0x49, 0xb7, 0xa5,
	0xcd, 0xbd, 0xd6, 0x68, 0x2e, 0x5e, 0xf2, 0x77, 0x28, 0x9d, 0xd4, 0x92, 0x4b, 0x5c, 0xb0, 0x95,
	0x19, 0x3a, 0x1c, 0x45, 0x20, 0x4b, 0x59, 0x7d, 0xcb, 0x42, 0x21, 0x5e, 0x30, 0x3e, 0xc1, 0x68,
	0x96, 0xb2, 0xa1, 0x93, 0x85, 0x92, 0x4e, 0xdc, 0x0f, 0xc0, 0x36, 0xe0, 0xe6, 0xab, 0x55, 0x7e,
	0x2d, 0x99, 0xae, 0x53, 0x31, 0x9d, 0xf7, 0xbb, 0x05, 0x76, 0x61, 0x57, 0xc1, 0x3d, 0x22, 0x8f,
	0x22, 0x2a, 0x84, 0xe1, 0x1e, 0x14, 0xd5, 0x97, 0x84, 0x1d, 0x68, 0x2e, 0x45, 0x4e, 0x43, 0x91,
	0xac, 0x42, 0x5f, 0xb2, 0x23, 0x9a, 0x9a, 0x87, 0x7d, 0xb5, 0x45, 0x08, 0x44, 0xe6, 0x3f, 0x52,
	0x77, 0x02, 0xbc, 0xea, 0xde, 0x80, 0x9e, 0xde, 0x38, 0xb5, 0x2a, 0x4e, 0x2d, 0x32, 0x2f, 0x84,
	0xc1, 0x5e, 0x98, 0x27, 0x72, 0x47, 0x86, 0x32, 0x17, 0x64, 0x19, 0x06, 0x71, 0x1a, 0xcb, 0x38,
	0x4c, 0xe2, 0x6f, 0xa9, 0xa1, 0xce, 0xfa, 0x96, 0xae, 0x4a, 0x1a, 0x26, 0x74, 0xa2, 0x71, 0xec,
	0x00, 0x25, 0xe5, 0xda, 0x94, 0x72, 0x55, 0x1b, 0x18, 0x60, 0x23, 0x7a, 0x13, 0xb0, 0xc7, 0xec,
	0x20, 0xd6, 0x74, 0x5f, 0xcf, 0x91, 0xd5, 0x90, 0xa3, 0xce, 0x4b, 0x39, 0x5a, 0x86, 0x01, 0x4d,
	0xa7, 0x31, 0x67, 0xe9, 0x31, 0x4d, 0x25, 0x6a, 0xa8, 0x6f, 0x79, 0xcf, 0xc0, 0x41, 0x2d, 0x8d,
	0x19, 0xb8, 0x00, 0x4e, 0x98, 0xcb, 0x43, 0x1d, 0x26, 0xd4, 0x52, 0x6d, 0x28, 0xe7, 0x28, 0xe7,
	0x0c, 0xe9, 0xd5, 0x09, 0x50, 0xf2, 0x2e, 0x83, 0xb3, 0x9b, 0x2a, 0x47, 0x95, 0x0f, 0x17, 0xc0,
	0xc9, 0xb5, 0xf0, 0x49, 0xf9, 0x8a, 0xab, 0x0d, 0xef, 0x31, 0x80, 0x39, 0x2a, 0xb2, 0x5a, 0xb4,
	0xac, 0x99, 0x68, 0xb9, 0xba, 0x35, 0x1c, 0x70, 0x65, 0xa1, 0xb2, 0xa2, 0x17, 0x94, 0xb2, 0xba,
	0x93, 0x52, 0x3a, 0xa1, 0x45, 0xa5, 0xf6, 0x02, 0x94, 0xbc, 0x8b, 0xb0, 0xb4, 0xc1, 0xc3, 0xec,
	0x70, 0x7b, 0xbc, 0x9d, 0x53, 0xae, 0x59, 0xe3, 0x44, 0x2d, 0xd0, 0x86, 0x42, 0xf0, 0x7e, 0xb1,
	0xc0, 0xde, 0xd8, 0x1e, 0xaf, 0x2b, 0xc3, 0x55, 0x1c, 0x8e, 0xa9, 0x10, 0xe1, 0x41, 0xd9, 0x5d,
	0x51, 0x24, 0x63, 0x70, 0x12, 0x16, 0xe9, 0x7e, 0x69, 0x48, 0xc2, 0x6f, 0x2c, 0x39, 0x83, 0xe9,
	0x8f, 0xf1, 0x5a, 0x50, 0x01, 0xb8, 0xb7, 0x55, 0x8a, 0x0b, 0x41, 0xd5, 0x5e, 0x12, 0xa7, 0x85,
	0xc2, 0x5e, 0xa0, 0xd7, 0xca, 0xa5, 0x88, 0x25, 0xf9, 0x71, 0x8a, 0xce, 0xa2, 0xe4, 0xfd, 0x60,
	0xc1, 0x00, 0x7d, 0xd2, 0xe1, 0xba, 0x53, 0x1b, 0x22, 0x06, 0x2b, 0xef, 0xb5, 0x63, 0x2d, 0x1c,
	0x36, 0xee, 0x95, 0xb9, 0x2b, 0xdc, 0xb9, 0xd4, 0xca, 0x9d, 0x32, 0xc5, 0xdf, 0x75, 0xaa, 0x81,
	0x66, 0x4d, 0xe1, 0x7d, 0xfa, 0x4a, 0xeb, 0xbb, 0xd1, 0x88, 0x58, 0xbf, 0x7c, 0x4a, 0xc7, 0xfb,
	0xc9, 0x6a, 0xee, 0x78, 0xe3, 0xd9, 0x8e, 0x77, 0xfb, 0xb5, 0x75, 0xcd, 0x34, 0xba, 0x5b, 0x0d,
	0x7d, 0x4e, 0x8f, 0x5c, 0x11, 0xa7, 0x38, 0x95, 0xe8, 0x91, 0x4b, 0x8b, 0xde, 0x8f, 0x16, 0x9c,
	0xdb, 0xd8, 0x1e, 0xcf, 0xcc, 0x75, 0xf7, 0x66, 0x52, 0x72, 0xb9, 0xb5, 0x59, 0xff, 0x4d, 0x56,
	0x2e, 0xc2, 0xd2, 0x6e, 0x36, 0x09, 0x25, 0xbd, 0xbf, 0xb5, 0xa9, 0xde, 0xde, 0x79, 0xe8, 0xed,
	0xe7, 0x71, 0x32, 0x31, 0x35, 0xaf, 0x05, 0xef, 0x08, 0x1c, 0xfd, 0x7e, 0x05, 0x3e, 0xcf, 0x30,
	0xcb, 0x02, 0x96, 0xd0, 0xcd, 0x35, 0xf3, 0x3c, 0xcb, 0x0d, 0x32, 0x82, 0x73, 0x28, 0xec, 0x68,
	0xa7, 0x37, 0xd7, 0x90, 0x05, 0x5e, 0xde, 0x56, 0x35, 0x5b, 0x63, 0x64, 0xc7, 0x90, 0xac, 0xf7,
	0xbd, 0x05, 0x60, 0xb4, 0x89, 0x8c, 0xac, 0x97, 0xc7, 0xda, 0xf4, 0xae, 0xea, 0xe2, 0xdb, 0x53,
	0xf7, 0x35, 0x38, 0xb3, 0x7a, 0x48, 0xa3, 0xa3, 0x55, 0x96, 0xa6, 0xe6, 0x77, 0x40, 0xc4, 0xd2,
	0x94, 0x46, 0xb2, 0xe4, 0x9b, 0x6a, 0xc3, 0x5b, 0x03, 0x3b, 0xa0, 0x82, 0x4a, 0xa4, 0xe1, 0x2c,
	0xdf, 0x2f, 0x48, 0x10, 0x69, 0xd8, 0xc8, 0x0a, 0x25, 0xe3, 0xf1, 0x74, 0x86, 0x21, 0xcb, 0x8d,
	0x95, 0xbf, 0x01, 0xde, 0x59, 0x4f, 0x25, 0xe5, 0x19, 0x8f, 0x05, 0xc5, 0xd2, 0x7b, 0xc0, 0xd9,
	0x11, 0xe5, 0x64, 0x1f, 0x06, 0x1b, 0x54, 0x9a, 0x22, 0x20, 0xa3, 0x56, 0xb5, 0x12, 0xd0, 0x13,
	0xf7, 0x72, 0xcb, 0x93, 0x22, 0x23, 0x11, 0xd8, 0x38, 0xe9, 0x53, 0x32, 0x77, 0x5a, 0xaf, 0x7e,
	0x67, 0xb8, 0x57, 0x5b, 0x9f, 0xd5, 0x4a, 0xce, 0xab, 0x1f, 0x57, 0xe8, 0x9d, 0xd1, 0x2f, 0xc8,
	0xc5, 0x46, 0x10, 0xfc, 0x39, 0xe7, 0x5e, 0x6a, 0x71, 0x4a, 0x64, 0xe4, 0x0b, 0x70, 0xca, 0x79,
	0x88, 0x34, 0x47, 0xa0, 0x3e, 0x37, 0xb9, 0x2d, 0x59, 0x91, 0x3c, 0x06, 0x47, 0x8d, 0x09, 0xba,
	0xbb, 0xcf, 0xb1, 0x1c, 0x27, 0xaa, 0x39, 0x96, 0x97, 0xf3, 0xcd, 0xe7, 0xda, 0x72, 0x9c, 0x18,
	0x9a, 0xef, 0x98, 0x9f, 0xbb, 0xee, 0x68, 0x8e, 0xd5, 0xd5, 0x08, 0xf2, 0x04, 0xec, 0xfb, 0x5b,
	0x9b, 0xba, 0x97, 0xcf, 0x01, 0x37, 0x53, 0xc5, 0x9c, 0x90, 0x54, 0x63, 0xc1, 0x13, 0xe8, 0x17,
	0xbd, 0x99, 0x34, 0xdf, 0x28, 0x7b, 0xbd, 0xfb, 0x7e, 0xab, 0x73, 0x3a, 0x9b, 0x8b, 0xd8, 0xc8,
	0xe6, 0xe5, 0xb2, 0xd6, 0xc2, 0xe7, 0x44, 0xa5, 0xde, 0x19, 0x9f, 0x83, 0x53, 0x12, 0xe1, 0x1c,
	0x0d, 0x75, 0xc2, 0x74, 0xdb, 0xa5, 0x87, 0x84, 0x70, 0x56, 0x17, 0x59, 0x9e, 0xc8, 0x82, 0xa2,
	0xe6, 0x44, 0xa8, 0xa4, 0xdb, 0x39, 0x11, 0xaa, 0x11, 0xe5, 0x53, 0x80, 0x80, 0x25, 0x09, 0xc2,
	0xb7, 0x2c, 0x9b, 0x96, 0xe6, 0x3f, 0x83, 0x81, 0xe6, 0x36, 0xf5, 0x62, 0x29, 0x9f, 0x03, 0x6e,
	0x58, 0xb0, 0x2d, 0xf8, 0x04, 0xce, 0x95, 0x3c, 0x4b, 0x23, 0x3d, 0xe3, 0xb4, 0xb4, 0xbe, 0x99,
	0xa0, 0x66, 0xc8, 0xfb, 0x01, 0x3c, 0xb5, 0xcd, 0x97, 0xfd, 0xbe, 0xfe, 0x2f, 0xe9, 0xe6, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x92, 0x23, 0x28, 0x69, 0x12, 0x00, 0x00,
}
