syntax = "proto3";

package viewpoint.whoville.apinator;
option go_package="apinator";

// Templates service that returns templates
service TwirpAPI {
   
}

service EnterpriseServiceBroker {
    rpc GetTemplate(TemplateReq) returns (TemplateResp);
    rpc Validate(ValidationReq) returns (ValidationResp);
    rpc ListServiceTemplates(ListReq) returns (ListResp);
    rpc GetPathData(PathDataReq) returns (PathDataResp);
    rpc GetServicePaths(ServicePathReq) returns (ServicePathResp);
    rpc MakeVault(MakeVaultReq) returns (Vault);
}

/////////////////////////////////////////////////////////
// Enterprise Messages                                 //
/////////////////////////////////////////////////////////
message ListReq {
    string service = 1;
}

message ListResp {
    repeated string templates = 1;
}


/////////////////////////////////////////////////////////
// Template Messages                                   //
/////////////////////////////////////////////////////////

// Request for retrieving a template file from the vault
message TemplateReq {
    string service = 1; // Service name i.e. ST, Spectrum, etc.
    string file = 2; // Template file name (no extension)
}

// Response containing template and extension as stored in the vault
message TemplateResp {
    string data = 1; // Template file encoded in base64
    string ext = 2; // Template file extension
}

/////////////////////////////////////////////////////////
// Validation Messages                                 //
/////////////////////////////////////////////////////////

// Request for checking the validity of credentials for a service in a given environment
message ValidationReq {
    string service = 1; // service name i.e. ServiceTechDB
    string env = 2; // Environment (local, dev, QA)
}

message ValidationResp {
    bool isValid = 1; // Boolean value indicating whether the credentials are valid or not
}

/////////////////////////////////////////////////////////
// PathData Messages                                 //
/////////////////////////////////////////////////////////

// Request for checking the validity of credentials for a service in a given environment
message PathDataReq {
    repeated string paths = 1; // service name i.e. ServiceTechDB
    string env = 2; // Environment (local, dev, QA)
}

message PathDataResp {
    repeated string data = 1; // Data file encoded in base64
}

/////////////////////////////////////////////////////////
// ServicePath Messages                                 //
/////////////////////////////////////////////////////////

// Request for checking the validity of credentials for a service in a given environment
message ServicePathReq {
    string service = 1; // service name i.e. ServiceTechDB
    string env = 2; // Environment (local, dev, QA)
}

message ServicePathResp {
    repeated string paths = 1; // Data file encoded in base64
}

/////////////////////////////////////////////////////////
// ?? Messages                                 //
/////////////////////////////////////////////////////////

// Request for checking the validity of credentials for a service in a given environment
message Vault {
    message Env {
        string name = 1;
        message Service {
            string name = 1;
            message File {
                string name = 1;
                message Value {
                    string key = 1;
                    string value = 2;
                }
                repeated Value values = 2;
            }
            repeated File files = 2;
        }
        repeated Service services = 2;
    }
    repeated Env envs = 2;
}
message MakeVaultReq {}