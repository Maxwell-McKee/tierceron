package kv

import (
	"github.com/hashicorp/vault/api"
)

// Modifier maintains references to the active client and
// respective logical needed to write to the vault. Path
// can be changed to alter where in the vault the key,value
// pair is stored
type Modifier struct {
	client  *api.Client  // Client connected to vault
	logical *api.Logical // Logical used for read/write options
	Path    string       // Secrets path accessed by this modifier
}

// Constructs a new modifier struct and connects to the vault
// @param token 	The access token needed to connect to the vault
// @param address	The address of the API endpoint for the server
// @return 			A pointer to the newly contstructed modifier object (Note: path set to default),
// 		   			Any errors generated in creating the client
func NewModifier(token string, address string) (*Modifier, error) {
	if len(address) == 0 {
		address = "http://127.0.0.1:8200" // Default address
	}

	// Create client
	modClient, err := api.NewClient(&api.Config{
		Address: address,
	})

	// Return errors if found in client creation
	if err != nil {
		return nil, err
	}

	// Set access token and path for this modifier
	modClient.SetToken(token)

	// Return the modifier
	return &Modifier{client: modClient, logical: modClient.Logical(), Path: "secret/default"}, nil
}

// Writes the key,value pairs in data to the vault
// @param 	data A set of key,value pairs to be written
// @return	Warnings (if any) generated from the vault,
//			errors generated by writing
func (m *Modifier) Write(data map[string]interface{}) ([]string, error) {
	Secret, err := m.logical.Write(m.Path, data)
	if Secret == nil { // No warnings
		return nil, err
	} else {
		return Secret.Warnings, err
	}
}

// Reads the data from the path referenced by this Modifier
// @return	A Secret pointer that contains key,value pairs and metadata
//			errors generated from reading
func (m *Modifier) Read() (*api.Secret, error) {
	return m.logical.Read(m.Path)
}
