# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.13' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/bitbucket.org/dexterchaney/whoville' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    echo "Mod init"
    go mod init
    echo "Mod download"
    go mod download
    echo "Compile start"
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultconfig
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultpub
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultinit
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultinitp
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultx
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultxp

    CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultconfig
    CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultpub
    CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultinit
    CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultinitp
    CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultx
    CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go install -a -ldflags '-w' bitbucket.org/dexterchaney/whoville/vaultxp

    echo "Compile Complete"
    if [[ ! -f $(GOBIN)/vaultconfig ]] ; then
        echo 'File "vaultconfig" was not built, aborting.'
        exit 1
    fi
    cp $(GOBIN)/vault* $(Build.ArtifactStagingDirectory)
    find $(GOBIN)
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: vaultconfig
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/vaultconfig/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: vaultpub
    buildContext: '$(Build.ArtifactStagingDirectory)'
    command: build
    dockerfile: '**/docker/vaultpub/Dockerfile'
    tags: |
      $(Build.SourceVersion)

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultconfig'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultconfig'
    pushTag: '$(Build.SourceVersion)'
- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultconfig'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultconfig'
    pushTag: 'latest'

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultpub'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultpub'
    pushTag: '$(Build.SourceVersion)'
- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Seattle AWS Development'
    regionName: 'us-west-2'
    imageSource: 'imagename'
    sourceImageName: 'vaultpub'
    sourceImageTag: '$(Build.SourceVersion)'
    repositoryName: 'vaultpub'
    pushTag: 'latest'