templates:
  ServiceTech:
    ServiceTechAPI:
      hibernate:
        url: [super-secrets/ServiceTechAPI, url]
        username: [super-secrets/ServiceTechAPI, user]
        password: [super-secrets/ServiceTechAPI, pass]
        sendGridApiKey: [super-secrets/Common, SendGridApiKey]
      config:
        keyStorePath: [super-secrets/Common, KeyStorePath]
        keyStorePassword: [super-secrets/Common, KeyStorePass]
      newrelic:
        newrelic:
          app_name: [super-secrets/ServiceTechAPI, newrelicAppName]
          license_key: [super-secrets/ServiceTechAPI, newrelicLicenseKey]
    ServiceTechAPIM:
      hibernate:
        url: [super-secrets/ServiceTechAPIM, url]
        username: [super-secrets/ServiceTechAPIM, user]
        password: [super-secrets/ServiceTechAPIM, pass]
        sendGridApiKey: [super-secrets/Common, SendGridApiKey]  
      config:
        keyStorePath: [super-secrets/Common, KeyStorePath]
        keyStorePassword: [super-secrets/Common, KeyStorePass]
        certSourcePath: [super-secrets/Common,  CertSourcePath]
        certDestPath: [super-secrets/Common,  CertDestPath]
        certData: [super-secrets/Common, CertData]
        auth_viewpointPlatformIdentity: [values/Common/Auth, viewpointPlatformIdentity]
        auth_viewpointPlatformDiscovery: [values/Common/Auth, viewpointPlatformDiscovery]
        auth_viewpointPlatformClientId: [values/Common/Auth, viewpointPlatformClientId]
        auth_viewpointApiScopeSecret: [super-secrets/ServiceTechAPIM, viewpointApiScopeSecret] 
      newrelic:
        newrelic:
          app_name: [super-secrets/ServiceTechAPIM, newrelicAppName]
          license_key: [super-secrets/ServiceTechAPIM, newrelicLicenseKey]
    ServiceTechUI:
      runtimeConfig:
        serviceBaseUrl: [super-secrets/ServiceTechUI, url]
        stage: [super-secrets/ServiceTechUI, stage]
  Spectrum:
    RestServices:
      config:
        url: [super-secrets/RestServices, url]
        username: [super-secrets/RestServices, user]
        password: [super-secrets/RestServices, pass]
        taskServer: [super-secrets/Common,  TaskServerServer]
        taskPort: [super-secrets/Common,  TaskServerPort]
        taskUser: [super-secrets/Common,  TaskServerUsername]
        taskPassword: [super-secrets/Common,  TaskServerPassword]
        keyStorePath: [super-secrets/Common, KeyStorePath]
        keyStorePassword: [super-secrets/Common, KeyStorePass]
        certSourcePath: [super-secrets/Common,  CertSourcePath]
        certDestPath: [super-secrets/Common,  CertDestPath]
        certData: [super-secrets/Common,  CertData]
        viewpointPlatformIdentity: [values/RestServices, viewpointPlatformIdentity]
        viewpointPlatformDiscovery: [values/RestServices, viewpointPlatformDiscovery]
        viewpointPlatformClientId: [values/RestServices, viewpointPlatformClientId]
        viewpointApiScopeSecret: [super-secrets/RestServices, viewpointApiScopeSecret]
        soapUrl: [super-secrets/RestServices, LegacyProIVAPIUrl] 
        soapPort: [super-secrets/RestServices, LegacyProIVAPIPort]
        soapPrefix: [super-secrets/RestServices, LegacyProIVAPIUrlPrefix]
        apiVersion: [super-secrets/RestServices, APIversion]
        endpointValidationPath: [super-secrets/RestServices, APIendpointValidationPath]
        validateEndpointUrl: [super-secrets/RestServices, APIvalidateEndpointUrl]
        getEnterpriseRegistrationEndpointUrl: [super-secrets/RestServices, APIgetEnterpriseRegistrationEndpointUrl]
        registerEndpointUrl: [super-secrets/RestServices, APIregisterEndpointUrl]
        enterpriseByRegistrationKeyUrl: [super-secrets/RestServices, APIenterpriseByRegistrationKeyUrl]
        refreshEntityMappingsUrlTemplate: [super-secrets/RestServices, APIrefreshEntityMappingsUrlTemplate]
        portalUri: [super-secrets/RestServices, SpectrumPortalUri] 
        spectrumServiceAuthUrl: [super-secrets/RestServices, SpectrumPortalUri]
        tokenAudience: [super-secrets/RestServices, TeamTokenAudience] 
        serverToServerClientId: [super-secrets/RestServices, TeamServerToServerClientId]
        integrationAccessTokenIssuer: [super-secrets/RestServices, TeamIntegrationAccessTokenIssuer]
        accessTokenUrl: [super-secrets/RestServices, TeamAccessTokenUrl]
        tokenIssuer: [super-secrets/RestServices, TeamTokenIssuer]
        serverToServerPublicKey: [super-secrets/RestServices, TeamServerToServerPublicKey]
        serverToServerClientSecret: [super-secrets/RestServices, TeamServerToServerClientSecret]
    SpectrumAurora:
      context:
        url: [super-secrets/SpectrumAurora, url]
        username: [super-secrets/SpectrumAurora, user]
        password: [super-secrets/SpectrumAurora, pass]
        hosted_resourceRef_resRefName: [values/Common, resRefName]
    SpectrumForms:
      context:
        url: [super-secrets/SpectrumForms, url]
        username: [super-secrets/SpectrumForms, user]
        password: [super-secrets/SpectrumForms, pass]
        hosted_resourceRef_resRefName: [values/Common, resRefName]
    SpectrumDI:
      WebContent:
        META-INF:
          context:
            url: [super-secrets/SpectrumDI, url]
            username: [super-secrets/SpectrumDI, user]
            password: [super-secrets/SpectrumDI, pass]
        WEB-INF:
          SnowboundLicense:
            LicensedTo: [super-secrets/SpectrumDI, SnowboundLicensedTo] 
            LicenseType: [super-secrets/SpectrumDI, SnowboundLicenseType]
            Signature: [super-secrets/SpectrumDI, SnowboundSignature]
          web:
            webApp.servlet.initParam.tmpDir.paramValue: [values/SpectrumDI/Web, tmpDir]
            webApp.servlet.initParam.filePath.paramValue: [values/SpectrumDI/Web, filePath]
          ehcache:
            config.persistence.directory: [values/SpectrumDI/EhCache, config.persistence.directory]
    SpectrumReports:
      service-config:
        applicationPort: [super-secrets/SpectrumReports, ReportsPortsAppPort] 
        adminPort: [super-secrets/SpectrumReports, ReportsPortsAdminPort]
        server: [super-secrets/SpectrumReports, server]
        user: [super-secrets/SpectrumReports, user]
        password: [super-secrets/SpectrumReports, pass]
        database: [super-secrets/SpectrumReports, database]

values:
    SpectrumDI:
      Web:
        tmpDir: <Path>
        filePath: <Path>
      EhCache:
        config.persistence.directory: <Path>
    Common:
      resRefName: <Pool>
      Auth:
        viewpointPlatformIdentity: <url>
        viewpointPlatformDiscovery: <discoveryPath>
        viewpointPlatformClientId: <clientId>
    RestServices:
      viewpointPlatformIdentity: <url>
      viewpointPlatformDiscovery: <discoveryPath>
      viewpointPlatformClientId:  <clientId>




super-secrets:
  Common:
    SendGridApiKey: <secret>
    KeyStorePath: <certFile>
    KeyStorePass: <password>
    CertSourcePath: <certPathAndFile>
    CertDestPath: <certDestFile>
    CertData: data
    TaskServerServer: <host>
    TaskServerPort: <port>
    TaskServerUsername: <user>
    TaskServerPassword: <password>
  ServiceTechAPI:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
    newrelicAppName: <appNameDescription>
    newrelicLicenseKey: <secret>
  ServiceTechAPIM:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
    viewpointApiScopeSecret: <secret>
    newrelicAppName: <appNameDescription>
    newrelicLicenseKey: <secret>
  SpectrumAurora:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
  SpectrumDI:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
    SnowboundLicensedTo: <user>
    SnowboundLicenseType: <type>
    SnowboundSignature: <secret>
  SpectrumForms:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
  SpectrumReports:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
    server: <host>
    database: <database>
    ReportsPortsAppPort: <port>
    ReportsPortsAdminPort: <port>
  RestServices:
    url: <jdbcUrl>
    user: <user>
    pass: <secret>
    viewpointApiScopeSecret: <secret>
    newrelicAppName: <appName>
    newrelicLicenseKey: <secret>
    APIversion: <apiVersion>
    APIendpointValidationPath: <endpointValidationPath>
    APIvalidateEndpointUrl: <validateEndpointUrl>
    APIgetEnterpriseRegistrationEndpointUrl:  <getEnterpriseRegistrationEndpointUrl>
    APIregisterEndpointUrl: <registerEndpointUrl>
    APIenterpriseByRegistrationKeyUrl: <enterpriseByRegistrationKeyUrl>
    APIrefreshEntityMappingsUrlTemplate: <refreshEntityMappingsUrlTemplate>
    SpectrumPortalUri: <url>
    SpectrumServiceAuthUrl: <url>
    TeamTokenAudience: <audience>
    TeamServerToServerClientId: <id>
    TeamIntegrationAccessTokenIssuer: <url>
    TeamAccessTokenUrl: <url>
    TeamTokenIssuer: <url>
    TeamServerToServerPublicKey: <secret>
    TeamServerToServerClientSecret: <secret>
    LegacyProIVAPIUrl: <url>
    LegacyProIVAPIPort: <port>
    LegacyProIVAPIPrefix: <path>

  ServiceTechUI:
    url: <url>
    stage: <env>

value-metrics:    

verification:
  Common:
    type: SendGridKey
  ServiceTechAPI:
    type: db
  ServiceTechAPIM:
    type: db
  SpectrumAurora:
    type: db
  SpectrumDI:
    type: db
  SpectrumForms:
    type: db
  SpectrumReports:
    type: db
  RestServices:
    type: db


apiLogins:
  meta:
    authEndpoint: <authEndpoint>
    sessionDB: <sessionDB>
    user: <user>
    pass: <pass>
    vaultApiTokenSecret: <url>
