// Code generated by go-bindata.
// sources:
// ../certs/cert_files/serv_cert.pem
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _CertsCert_filesServ_certPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x95\xcb\x92\xab\x38\x12\x86\xf7\x3c\x85\xd7\xe3\xe9\x63\x0a\xdb\x65\xdc\x11\xb5\x90\xb8\x08\x30\xc2\x20\xc0\x06\xef\xb8\x59\x80\xb1\xc1\xdc\x04\x7e\xfa\x89\xaa\x9a\x8e\x39\x7d\xce\x44\x34\xc1\x2a\x23\x7f\xa5\xa4\x5f\x5f\x26\x8c\xe8\x02\xf4\x7d\x5b\xc4\x43\x9f\x75\xdc\x62\xb1\x58\x54\x75\x12\x55\x87\x6c\xd6\xe5\x3f\x17\xfc\xdb\x82\xe7\xbf\x7f\xae\x1b\xe2\x32\x4b\xfa\x8f\xd5\xd1\xff\x90\xeb\x7b\x54\x3c\x16\x52\xfd\xe8\xdb\xba\x5a\x9c\xa2\xaa\x48\xa3\x3e\x4b\x57\x92\xf5\xf1\xaf\x1f\x69\x36\x25\x79\x94\x66\xe3\x8f\xa4\xbe\x73\x45\xd7\x0d\x59\xfb\xb1\x92\x3e\x7c\x77\xe5\x7a\x1f\xa0\x2d\x5e\xf5\x23\x5a\x99\x1f\x6e\x52\xf7\x7d\x97\x46\x55\xb6\x3a\x7e\xa0\x5a\x8e\xd2\x74\xfe\x94\xfc\x7b\xa1\x3f\x92\x1f\x9f\x75\xf2\xbe\x6f\xfe\x5c\xad\x92\xac\xed\xbb\x1f\xb4\x4e\xff\xca\x58\xb5\x59\x53\x77\x45\x5f\xb7\xf3\xea\xb3\x26\xaa\x17\x5f\xea\x85\x9b\x25\x43\x9b\x2d\xa4\xac\xed\x8b\x6b\x91\x44\x7d\xb6\x00\x43\x9f\xd7\x6d\xd1\xcf\x8b\x3f\x16\x48\xe0\xfe\xf8\xfc\xa0\x82\x74\x6b\x21\x29\xc4\xd3\x55\x5d\x02\x9e\xf2\x15\xe5\xb0\xae\xab\xf8\x25\x49\x10\x0e\x14\x30\x1d\x02\xaa\x1b\xc0\x4e\xe5\x2e\x61\xfb\xc4\x19\x6b\x0c\x78\x24\xb9\x4f\xe4\xea\xf1\x5a\x76\x14\x28\x31\x1f\x60\x1d\xf1\xd8\xe9\x98\xe4\x84\x32\x77\x72\x1c\xa4\x30\xe3\xe4\xbf\x14\x07\x83\x0d\x02\x6f\xbe\x22\x41\xac\x39\x81\xd1\x64\xf7\xfd\x10\x7a\x8a\x87\xa1\xf2\x15\x87\x13\x3e\xf8\x82\x35\xa6\x1a\x79\x5d\x90\xda\x5d\x3c\x25\xe2\x30\xa4\xdf\xa2\x1c\x13\x22\xec\x95\xf0\x4c\x6e\x99\xbb\x2d\x63\x81\xef\x74\xa5\x1a\xc2\x79\x33\x99\x1e\x68\x21\xb5\x4e\x10\x74\x9e\x81\x72\x3e\xd5\xc0\xbb\x39\xef\xcb\x4b\x60\xf0\x5c\x32\x6f\x1f\xb1\x40\xf2\x0b\x22\x5b\xf3\x6e\x8d\xb1\xbb\x9f\x2f\x01\x1c\x13\xa1\xe2\xe3\xb5\xb1\x35\x5f\xca\x0b\xcb\xdf\x3b\x00\x13\x7e\x12\x41\xa4\x04\xa9\xb7\x8b\x76\xa3\xbe\x70\x2a\xb9\x34\x30\x2a\x5d\xb1\xaa\xe4\x41\x9a\xcb\xbd\x2a\xc3\x80\x54\xba\xa2\xbe\xa5\x28\x1f\x93\x7b\xc5\x67\x2e\xe8\x75\x25\x99\x31\xdc\x04\xb2\xa7\x6c\xb0\x8c\x27\x5c\xea\xcc\xf2\x30\xc3\xa7\x3a\xe0\x64\x4f\x67\xbf\x04\x99\xed\x29\x39\x86\xe2\xf7\xd1\x26\x1c\x12\xb4\xef\xc3\x73\x35\xe8\x8a\x35\xc6\x0f\x32\xc7\x02\xa3\xa7\xbb\xda\x45\x67\x92\x73\x29\x3a\xdd\x30\xa1\x4c\xa5\xa1\x7c\x72\x1c\x59\x06\xe2\xd3\xbc\x93\x2a\x43\x56\x1d\x9e\x49\x95\x16\x5f\xf7\xc1\x28\x55\x8a\x5f\x1d\x01\x8e\x0f\x38\xb0\xd1\xa1\xcc\xc0\x67\xc2\x01\xd4\x3a\x04\x8e\xf4\x28\xed\x4a\x0c\xd2\xfa\x96\xd8\xb5\xe7\x99\xfb\x7d\x2e\x4e\xe6\x28\xac\xb3\x2b\x8b\xde\x35\xbb\x99\x5a\x7f\xe9\xf0\xfa\x39\xd8\x16\xcb\x37\x4e\xa5\x81\xba\xe5\x27\x0a\x36\x6a\x13\x45\x4d\xa0\x0d\x68\x4d\xcf\xed\xa6\x7d\x62\x79\xdd\xbb\x78\x92\xa5\xd0\x69\xa6\x7b\xd0\x67\xcb\xd1\x9e\xee\x55\x21\xc5\x2c\x58\xea\x5b\x7e\x26\xd5\x41\xa1\x9c\xbf\x55\xc0\x1c\xbc\x59\xa9\x55\x02\xaa\x34\xb7\x65\x5f\x7a\x1b\xd5\x18\x18\x0b\x78\x08\xbd\x8d\x74\x18\x6f\xcd\x4e\xd1\xd0\x20\xc6\x11\x91\x63\xb5\xae\x56\xad\xdb\xef\x0a\xd8\x04\x01\x22\x33\x57\x06\xa6\x86\xe0\x4e\xe8\xbb\xed\xbc\x74\x0d\xa9\x1c\xa6\x38\xb9\x54\x3b\x43\xe9\xd8\x74\xbd\x77\x47\x0f\xef\xba\xb3\x64\xfa\x6b\x5a\x78\xa7\x9e\x3d\xc1\xfb\x7a\xaa\xd4\x7a\x57\xb8\x8f\xcc\x2f\x5e\x1c\x3d\x1a\xee\x61\xb5\x6c\x7a\x0c\xe2\x95\xa0\xdd\xeb\x26\x24\xcb\x7e\xce\x8d\x66\xd9\xdb\xd6\x68\x80\xa5\x22\x27\xc7\xb9\x1d\x27\xad\x65\xda\xec\x39\xd6\x4e\x78\x67\x92\x79\x1a\xeb\xb1\xe9\xd8\x91\x13\x11\x99\x85\x2a\x9a\xf9\xed\xbc\xeb\xe6\xe3\xcd\xbe\xd9\xd6\xd5\x5c\x07\x4f\x8d\xe6\x41\x73\xee\x50\xed\x5f\xa6\x77\x92\x03\x8a\x21\x00\xa8\xa4\x14\x89\x58\xd7\xe1\x20\x03\xfc\xf9\x3a\x39\x8d\x60\x08\xae\xa2\x02\x4a\x00\x30\xe4\x3f\xbd\x4f\x0d\xc7\x39\x63\xe8\x20\x49\xea\x10\x70\x7c\x15\x32\x0c\x21\xa5\x2d\xa4\x8a\x0a\x9d\x44\x06\x25\x38\x7e\x8a\x35\x47\x84\xdc\xa7\x18\x02\x2c\xc1\x08\x30\x8b\x85\xf2\x89\xf0\x57\x28\x03\x66\x96\xa0\xab\xa5\x27\x3d\xe8\xe1\x3d\xd2\x08\x9f\xc8\xf5\x68\x0a\xd6\x1c\x4b\x7f\x7f\xfa\x5c\xec\xee\x1f\x17\x54\x3d\xf0\x03\x4f\xa6\x47\x27\x4b\xda\x96\xc9\x9d\xb1\xc0\xf9\x5a\x8c\x42\x35\x64\x27\x19\xea\x90\xf6\x34\xbf\x51\x98\x8f\x6f\x3d\x70\x92\x00\x78\x60\x8b\xe5\x04\x71\xff\xdb\xa6\x0e\xd5\xa2\xaf\x53\x8d\xb0\x63\x21\x8e\xa1\x70\x9a\x53\x54\xdd\xa3\xb3\x95\xa7\xe8\xf4\x32\xef\xe9\x78\xf9\x86\x68\x08\x85\x7d\x6f\xae\x8d\x2a\x41\xfb\x17\x17\x05\x64\x4c\x1e\xb7\x11\x03\x8a\xe0\x3d\x83\x32\x50\x24\xe0\x41\xe1\xa7\x33\x43\xe0\x90\x27\x46\x94\x19\x20\xd4\x0f\x2c\x84\xd0\xf1\x35\x0c\x10\x42\x28\xe7\xb9\xff\xb2\x3d\x86\x6b\x8b\xfd\x56\xe5\x05\xc1\x4f\x0b\x31\x50\x87\xfc\x4f\xf7\xf1\x45\x30\xf7\x17\xc2\xff\xd8\x17\x84\xf4\x16\x9d\x93\xd9\xbc\x5b\x73\x2a\x83\xeb\x97\x0b\x2e\x56\x38\x24\x83\x33\x85\x04\xb0\x96\x7f\x94\x1d\xe3\xe9\x4b\x2a\xf0\xfe\xba\x8b\x4d\x9b\xf5\xd2\x0c\x5e\x25\x68\xbe\x92\x89\xa2\xe8\x25\xa0\x94\xfe\x9d\x56\xee\x1b\x57\x41\x92\xcf\xbf\x23\xac\x7d\x3b\x71\x84\x30\x54\x54\xc5\x3b\x5a\xe2\x3b\xbf\x06\x9d\xdf\x31\xba\x3a\xdf\x9e\xcd\x8b\xad\x5d\x2e\x90\x0b\xf6\xff\x3a\xef\x27\xe6\xc0\x81\x22\x39\x9b\x99\x5f\xb5\xb6\x2d\xbf\x6b\x6a\x87\x6e\x91\xbc\xf3\xe1\x44\x8c\x4d\x95\x2b\xf6\xe4\x57\x5c\xf7\x18\x97\xfb\xfc\xb4\xef\xd0\x1e\x9d\x3c\x76\xf1\x4f\x62\x59\x68\x57\x2b\x1c\x12\xc3\xa9\x5a\x0f\xe8\xc4\x8a\xdf\x3c\x0c\x99\x6a\x1d\xc4\xc8\xb3\xdf\x58\x79\xe5\xd9\x94\xd2\x5e\x04\x4c\x32\x39\xb8\x35\xaf\xbc\xfa\x4a\x56\x97\xf3\x68\xc5\x86\xed\xee\x56\x04\x76\xcf\xee\xac\xea\x06\xcc\xd5\x70\x09\x33\x67\xa3\xf2\xab\x3d\x4b\x86\xf8\xfd\x2a\xe6\xe1\xab\x37\xc8\xbb\xbe\x79\xae\xdd\xf5\x96\x88\xdc\xd0\x78\xc2\x6b\x6f\x8c\x64\xa9\x96\x5a\x4f\x53\x23\x5b\x0a\x6a\x4e\xac\x79\xb5\x2e\xe3\x10\x92\xdd\x8d\x54\x45\x9d\xc5\x87\xc6\x3f\xb3\xc0\x1b\xf6\xf8\xe8\x1a\xd8\x51\xed\x80\x3e\x1a\x7b\xe3\x73\xaf\x03\xe6\x57\xe6\xb0\x3b\x6a\xf1\x2e\x6e\xdd\xd6\x02\x4c\x7e\x08\x6d\x73\x48\x1f\x2a\x36\x5d\x4f\x0c\x8f\xcb\x9b\xfd\xaa\x6f\x37\x51\x0c\xec\xf4\xc2\xe2\xe0\xed\xae\x8e\xe6\xba\xd8\xf4\x90\x07\x4f\x2e\x3a\xd6\x0f\x6d\x75\x2e\x84\x7d\xa5\x0a\x1e\xbb\xbc\x8f\x3d\x13\xd6\x5e\xbe\x5d\x3e\x8f\x9b\x27\x23\xd0\xd4\x82\x30\x6e\xf7\x81\x1a\x18\x76\x7e\xb2\x6f\xe5\x4c\xbf\x67\xa5\x62\xc9\xbf\x4d\xca\xff\x04\x00\x00\xff\xff\x76\x9f\x1b\x96\x37\x08\x00\x00")

func CertsCert_filesServ_certPemBytes() ([]byte, error) {
	return bindataRead(
		_CertsCert_filesServ_certPem,
		"../certs/cert_files/serv_cert.pem",
	)
}

func CertsCert_filesServ_certPem() (*asset, error) {
	bytes, err := CertsCert_filesServ_certPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../certs/cert_files/serv_cert.pem", size: 2103, mode: os.FileMode(511), modTime: time.Unix(1533239424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../certs/cert_files/serv_cert.pem": CertsCert_filesServ_certPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"certs": &bintree{nil, map[string]*bintree{
			"cert_files": &bintree{nil, map[string]*bintree{
				"serv_cert.pem": &bintree{CertsCert_filesServ_certPem, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

